def bergelutSamaNicho(lvlNicho, cooldownSkillNicho, namaMusuh, lvlMusuh, cooldownSkillMusuh):
    nyawaNicho, kekuatanNicho = hitung_status(lvlNicho)
    
    nyawaMusuh, kekuatanMusuh = hitung_status(lvlMusuh)
    

    print("Status Nicho")
    print("Nyawa:", nyawaNicho)
    print("Kekuatan:", kekuatanNicho)
    print()
    print("Status", namaMusuh)
    print("Nyawa:", nyawaMusuh)
    print("Kekuatan:", kekuatanMusuh)
    print()
    
    ronde = 1
    cooldownNicho = 0
    cooldownMusuh = 0
    
    while nyawaNicho > 0 and nyawaMusuh > 0:
        if cooldownNicho == 0:
            nyawaMusuh -= kekuatanNicho
            cooldownNicho = cooldownSkillNicho
            skill_used = "skill"
        else:
            nyawaMusuh -= kekuatanNicho
            skill_used = "attack"
        
        if nyawaMusuh <= 0:
            print(f"Nicho menang! {namaMusuh} kalah karena {skill_used} Nicho di ronde ke {ronde}.")
            return
        
        if cooldownMusuh == 0:
            nyawaNicho -= int(nyawaMusuh * 0.15)  # Skill musuh
            cooldownMusuh = cooldownSkillMusuh
            skill_used = "skill"
        else:
            nyawaNicho -= kekuatanMusuh
            skill_used = "attack"
        
        if nyawaNicho <= 0:
            print(f"Nicho kalah! {namaMusuh} kalah karena {skill_used} musuh di ronde ke {ronde}.")
            return
        
        cooldownNicho = max(0, cooldownNicho - 1)
        cooldownMusuh = max(0, cooldownMusuh - 1)
        
        ronde += 1
        
def hitung_status(level):
    nyawa_dasar = 10000
    kekuatan_dasar = 1000
    
    nyawa = nyawa_dasar
    kekuatan = kekuatan_dasar
    
    for _ in range(level):
        nyawa += nyawa * 0.05 
        kekuatan += kekuatan * 0.10 
    
    return int(nyawa), int(kekuatan)

bergelutSamaNicho(5, 3, "Musuh A", 4, 2)

============================================================================================================================================================================

def hitung_harga(harga_awal, jumlah):
    if jumlah < 0:
        return 0
    
    total_harga = 0
    
    for i in range(jumlah):
        if i == 0:
            diskon = 0.10
        else:
            diskon = 0.15
        
        harga_setelah_diskon = harga_awal - (harga_awal * diskon)
        total_harga += harga_setelah_diskon
    
    return total_harga

print("Harga akhir untuk 1 barang seharga Rp 100.000:", hitung_harga(100000, 1))  # Rp 90.000
print("Harga akhir untuk 3 barang seharga Rp 100.000:", hitung_harga(100000, 3))  # Rp 260.000
print("Harga akhir untuk 50 barang seharga Rp 47.295:", hitung_harga(47295, 50))  # Hitung total

==============================================================================================================================================================================

def digitKiriFibonacci(n):
    if n <= 1:
        print("n tidak valid!")
        return
    
    fibonacci = []
    a, b = 1, 1
    
    for _ in range(n):
        fibonacci.append(a)
        a, b = b, a + b
    
    print("Deret bilangan fibonacci:")
    print(" ".join(map(str, fibonacci)))
    
    print("Digit kiri:")
    for num in fibonacci:
        # Mencari digit kiri
        while num >= 10:
            num //= 10
        print(num)

digitKiriFibonacci(5)

============================================================================================================================================================================

def hilangkan_anomali(kalimat):
    hasil = ""
    
    for char in kalimat:
        if char.isalpha() or char.isspace():
            hasil += char  # Tambahkan karakter yang valid ke hasil
    
    if len(hasil) == 0:
        return "Kalimat Hilang"
    
    return hasil

print(hilangkan_anomali("Hello, World! 123"))  # Output: "Hello World"
print(hilangkan_anomali("12345!@#$%^&*()"))     # Output: "Kalimat Hilang"
print(hilangkan_anomali("Python is great!"))    # Output: "Python is great"

=============================================================================================================================================================================

def hitungTotalGenap(bilanganAwal, bilanganAkhir):
    # Validasi input
    if bilanganAwal > bilanganAkhir:
        return 0
    
    total_genap = 0
    
    # Menghitung total bilangan genap dalam rentang
    for i in range(bilanganAwal, bilanganAkhir + 1):
        if i % 2 == 0:  # Cek apakah bilangan genap
            total_genap += i
    
    return total_genap

# Contoh penggunaan
print(hitungTotalGenap(1, 10))  # Output: 30 (2 + 4 + 6 + 8 + 10)
print(hitungTotalGenap(5, 15))  # Output: 50 (6 + 8 + 10 + 12 + 14)
print(hitungTotalGenap(3, 3))    # Output: 0 (tidak ada bilangan genap)
print(hitungTotalGenap(10, 10))  # Output: 10 (10 adalah genap)
print(hitungTotalGenap(1000, 1000))  # Output: 1000 (1000 adalah genap)

=============================================================================================================================================================================

def deret_gws(jumlah_bilangan, kelipatan, angka_gws1, angka_gws2, kata_gws1, kata_gws2, kata_spesial):
    # Validasi input
    if (not all(isinstance(i, int) for i in [jumlah_bilangan, kelipatan, angka_gws1, angka_gws2]) or
        not all(isinstance(i, str) for i in [kata_gws1, kata_gws2, kata_spesial]) or
        jumlah_bilangan <= 0 or kelipatan <= 0 or
        angka_gws1 <= 0 or angka_gws2 <= 0 or
        angka_gws1 > jumlah_bilangan or angka_gws2 > jumlah_bilangan):
        print("TIDAK VALID")
        return
    
    # Menghasilkan deret kelipatan
    for i in range(1, jumlah_bilangan + 1):
        bilangan = i * kelipatan
        
        # Cek kelipatan dan cetak hasil yang sesuai
        if bilangan % angka_gws1 == 0 and bilangan % angka_gws2 == 0:
            print(kata_spesial, end=' ')
        elif bilangan % angka_gws1 == 0:
            print(kata_gws1, end=' ')
        elif bilangan % angka_gws2 == 0:
            print(kata_gws2, end=' ')
        else:
            print(bilangan, end=' ')

# Contoh penggunaan
deret_gws(10, 3, 2, 5, "GWS1", "GWS2", "SPESIAL")
print()  # Untuk memberikan baris baru setelah output
deret_gws(5, 4, 1, 2, "KATA1", "KATA2", "KATA_SPESIAL")
print()  # Untuk memberikan baris baru setelah output
deret_gws(3, 2, 4, 2, "A", "B", "C")  # TIDAK VALID
